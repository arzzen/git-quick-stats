#!/usr/bin/env bash
#
# Simple and efficient way to access various statistics in a git repository
################################################################################
# GLOBALS AND SHELL OPTIONS

set -o nounset
set -o errexit

_since=${_GIT_SINCE:-}
[[ -n "${_since}" ]] && _since="--since=$_since"

_until=${_GIT_UNTIL:-}
[[ -n "${_until}" ]] && _until="--until=$_until"

_pathspec=${_GIT_PATHSPEC:-}
[[ -n "${_pathspec}" ]] && _pathspec="-- $_pathspec"


_limit=${_GIT_LIMIT:-}
if [[ -n "${_limit}" ]]; 
    then _limit=$_limit
else
    _limit=10
fi

################################################################################
# DESC: Checks to make sure the user has the appropriate utilities installed
# ARGS: None
# OUTS: None
################################################################################
function check_utils() {
    local msg="not found. Please make sure this is installed and in PATH."

    command -v awk >/dev/null 2>&1 || { echo >&2 "awk ${msg}"; exit 1; }
    command -v basename >/dev/null 2>&1 || { echo >&2 "basename ${msg}"; exit 1; }
    command -v cat >/dev/null 2>&1 || { echo >&2 "cat ${msg}"; exit 1; }
    command -v column >/dev/null 2>&1 || { echo >&2 "column ${msg}"; exit 1; }
    command -v echo >/dev/null 2>&1 || { echo >&2 "echo ${msg}"; exit 1; }
    command -v git >/dev/null 2>&1 || { echo >&2 "git ${msg}"; exit 1; }
    command -v grep >/dev/null 2>&1 || { echo >&2 "grep ${msg}"; exit 1; }
    command -v head >/dev/null 2>&1 || { echo >&2 "head ${msg}"; exit 1; }
    command -v seq >/dev/null 2>&1 || { echo >&2 "seq ${msg}"; exit 1; }
    command -v sort >/dev/null 2>&1 || { echo >&2 "sort ${msg}"; exit 1; }
    command -v tput >/dev/null 2>&1 || { echo >&2 "tput ${msg}"; exit 1; }
    command -v tr >/dev/null 2>&1 || { echo >&2 "tr ${msg}"; exit 1; }
    command -v uniq >/dev/null 2>&1 || { echo >&2 "uniq ${msg}"; exit 1; }
    command -v wc >/dev/null 2>&1 || { echo >&2 "wc ${msg}"; exit 1; }
}

################################################################################
# DESC: Help information printed to stdout during non-interactive mode
# ARGS: None
# OUTS: None
################################################################################
function usage() { 
    local program=$(basename "$0")

    echo "
NAME
    ${program} - Simple and efficient way to access various stats in a git repo

SYNOPSIS
    For non-interactive mode: ${program} [OPTIONS]
    For interactive mode: ${program}

DESCRIPTION
    Any git repository contains tons of information about commits, contributors,
    and files. Extracting this information is not always trivial, mostly because
    of a gadzillion options to a gadzillion git commands.

    This program allows you to see detailed information about a git repository.

OPTIONS
    -r, --suggest-reviewers
        show the best people to contact to review code
    -T, --detailed-git-stats
        give a detailed list of git stats
    -d, --commits-per-day
        displays a list of commits per day
    -m, --commits-by-month
        displays a list of commits per month
    -w, --commits-by-weekday
        displays a list of commits per weekday
    -o, --commits-by-hour
        displays a list of commits per hour
    -A, --commits-by-author-by-hour
        displays a list of commits per hour by author
    -a, --commits-per-author
        displays a list of commits per author
    -S, --my-daily-stats
        see your current daily stats
    -C, --contributors
        see a list of everyone who contributed to the repo
    -b, --branch-tree
        show an ASCII graph of the git repo branch history
    -D, --branches-by-date
        show branches by date
    -c, --changelogs
        see changelogs
    -L, --changelogs-by-author
        see changelogs by author
    -h, -?, --help
        display this help text in the terminal

ADDITIONAL USAGE
    You can set _GIT_SINCE and _GIT_UNTIL to limit the git time log
        ex: export _GIT_SINCE=\"2017-20-01\"
    You can set _GIT_LIMIT for limited output log
        ex: export _GIT_LIMIT=20
    You can exclude a directory from the stats by using pathspec
        ex: export _GIT_PATHSPEC=':!directory'"
}

################################################################################
# DESC: Displays the interactive menu and saves the user supplied option
# ARGS: None
# OUTS: $opt: Option selected by the user based on menu choice
################################################################################
function show_menu() {
    local normal=$(tput sgr0)
    local cyan=$(tput setaf 6)
    local red=$(tput setaf 1)
    local yellow=$(tput setaf 3)
    
    echo -e "\n${red} Generate: ${normal}"
    echo -e "${cyan} ${yellow}  1)${cyan} Contribution stats (by author) ${normal}"
    echo -e "${cyan} ${yellow}  2)${cyan} Git changelogs (last $_limit days)${normal}"
    echo -e "${cyan} ${yellow}  3)${cyan} Git changelogs by author ${normal}"
    echo -e "${cyan} ${yellow}  4)${cyan} My daily status ${normal}"
    echo -e "${red} List: ${normal}"
    echo -e "${cyan} ${yellow}  5)${cyan} Branch tree view (last $_limit)${normal}"
    echo -e "${cyan} ${yellow}  6)${cyan} All branches (sorted by most recent commit) ${normal}"
    echo -e "${cyan} ${yellow}  7)${cyan} All contributors (sorted by name) ${normal}"
    echo -e "${cyan} ${yellow}  8)${cyan} Git commits per author ${normal}"
    echo -e "${cyan} ${yellow}  9)${cyan} Git commits per date ${normal}"
    echo -e "${cyan} ${yellow} 10)${cyan} Git commits per month ${normal}"
    echo -e "${cyan} ${yellow} 11)${cyan} Git commits per weekday ${normal}"
    echo -e "${cyan} ${yellow} 12)${cyan} Git commits per hour ${normal}"
    echo -e "${cyan} ${yellow} 13)${cyan} Git commits by author per hour ${normal}"
    echo -e "${red} Suggest: ${normal}"
    echo -e "${cyan} ${yellow} 14)${cyan} Code reviewers (based on git history) ${normal}"
    echo -e "\n${yellow}Please enter a menu option or ${red}press enter to exit. ${normal}"
    echo -n "${yellow}â†³ "
    read -r opt
}

################################################################################
# DESC: Prints a formatted message of the selected option by the user to stdout
# ARGS: $* (required): String to print (usually provided by other functions)
# OUTS: None
################################################################################
function option_picked() {
    local bold=$(tput bold)
    local red=$(tput setaf 1)
    local reset=$(tput sgr0)
    local msg=${*:-"${reset}Error: No message passed"}
    
    echo -e "${bold}${red}${msg}${reset}\n"
}

################################################################################
# DESC: Shows detailed contribution stats per author by parsing every commit in
#       the repo and outputting their contribution stats
# ARGS: None
# OUTS: None
################################################################################
function detailedGitStats() {
    option_picked "Contribution stats (by author):"
    git -c log.showSignature=false log --use-mailmap --no-merges --numstat \
        --pretty="format:commit %H%nAuthor: %aN <%aE>%nDate:   %ad%n%n%w(0,4,4)%B%n" \
        $_since $_until $_pathspec | LC_ALL=C awk '
    function printStats(author) {
      printf "\t%s:\n", author

      if(more["total"] > 0) {
        printf "\t  insertions:    %d (%.0f%%)\n", more[author], \
            (more[author] / more["total"] * 100)
      }

      if(less["total"] > 0) {
        printf "\t  deletions:     %d (%.0f%%)\n", less[author], \
            (less[author] / less["total"] * 100)
      }

      if(file["total"] > 0) {
        printf "\t  files:         %d (%.0f%%)\n", file[author], \
            (file[author] / file["total"] * 100)
      }

      if(commits["total"] > 0) {
        printf "\t  commits:       %d (%.0f%%)\n", commits[author], \
            (commits[author] / commits["total"] * 100)
      }

      if (first[author] != "") {
        printf "\t  lines changed: %s\n", more[author] + less[author]
        printf "\t  first commit:  %s\n", first[author]
        printf "\t  last commit:   %s\n", last[author]
      }

      printf "\n"
    }

    /^Author:/ {
      $1 = ""
      author = $0
      commits[author] += 1
      commits["total"] += 1
    }

    /^Date:/ {
      $1="";
      first[author] = substr($0, 2)
      if(last[author] == "" ) { last[author] = first[author] }
    }

    /^[0-9]/ {
      more[author] += $1
      less[author] += $2
      file[author] += 1

      more["total"]  += $1
      less["total"]  += $2
      file["total"]  += 1
    }

    END {
      for (author in commits) {
        if (author != "total") {
          printStats(author)
        }
      }
      printStats("total")
    }'
}

################################################################################
# DESC: Displays the authors in order of total contribution to the repo
# ARGS: None
# OUTS: None
################################################################################
function suggestReviewers() {
    option_picked "Suggested code reviewers (based on git history):"
    git -c log.showSignature=false log --use-mailmap --no-merges $_since $_until \
        --pretty=%aN $_pathspec | head -n 100 | sort | uniq -c | sort -nr | LC_ALL=C awk '
    { args[NR] = $0; }
    END {
      for (i = 1; i <= NR; ++i) {
        printf "%s\n", args[i]
      }
    }' | column -t -s,
}

################################################################################
# DESC: Displays a horizontal bar graph based on total commits per month
# ARGS: None
# OUTS: None
################################################################################
function commitsByMonth() {
    option_picked "Git commits by month:"
    echo -e "\tmonth\tsum"
    for i in Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
    do
        echo -en "\t$i\t"
        git -c log.showSignature=false shortlog -n --no-merges --format='%ad %s' \
            $_since $_until | grep " $i " | wc -l
    done | awk '{ 
        count[$1] = $2 
        total += $2 
    } 
    END{ 
        for (month in count) {
            s="|";
            if (total > 0) {
                percent = ((count[month] / total) * 100) / 1.25;
                for (i = 1; i <= percent; ++i) {
                    s=s"â–ˆ"
                }
                printf( "\t%s\t%-0s\t%s\n", month, count[month], s );
            }
        }
    }' | LC_TIME="en_EN.UTF-8" sort -M
}

################################################################################
# DESC: Displays a horizontal bar graph based on total commits per weekday
# ARGS: None
# OUTS: None
################################################################################
function commitsByWeekday() {
    option_picked "Git commits by weekday:"
    echo -e "\tday\tsum"
    for i in Mon Tue Wed Thu Fri Sat Sun
    do
        echo -en "\t$i\t"
        git -c log.showSignature=false shortlog -n --no-merges --format='%ad %s' \
            $_since $_until | grep "$i " | wc -l
    done | awk '{

    }
    NR == FNR { 
        count[$1] = $2; 
        total += $2;
        next 
    }
    END{ 
        
        for (day in count) {
            s="|";
            if (total > 0) {
                percent = ((count[day] / total) * 100) / 1.25;
                for (i = 1; i <= percent; ++i) {
                    s=s"â–ˆ"
                }
                printf( "\t%s\t%-0s\t%s\n", day, count[day], s );
            }
        }
    }' | sort -k 2 -n -r
}

################################################################################
# DESC: Displays a horizontal bar graph based on total commits per hour
# ARGS: $author (optional): Can focus on a single author. Default is all authors
# OUTS: None
################################################################################
function commitsByHour() {
    local author="${1:-}"
    local _author=""

    if [[ -z "${author}" ]]; then
        option_picked "Git commits by hour:"
        _author="--author=**"
    else
        option_picked "Git commits by hour for author '${author}':"
        _author="--author=${author}"
    fi
    echo -e "\thour\tsum"
    for i in $(seq -w 0 23)
    do
        echo -ne "\t$i\t"
            git -c log.showSignature=false shortlog -n --no-merges --format='%ad %s' \
                "${_author}" $_since $_until | grep ' '$i: | wc -l
    done | awk '{ 
        count[$1] = $2 
        total += $2 
    } 
    END{ 
        for (hour in count) {
            s="|";
            if (total > 0) {
                percent = ((count[hour] / total) * 100) / 1.25;
                for (i = 1; i <= percent; ++i) {
                    s=s"â–ˆ"
                }
                printf( "\t%s\t%-0s\t%s\n", hour, count[hour], s );
            }
        }
    }' | sort
}

################################################################################
# DESC: Shows the number of commits that were committed per date recorded in the
#       repo's log history
# ARGS: None
# OUTS: None
################################################################################
function commitsPerDay() {
    option_picked "Git commits per date:";
    git -c log.showSignature=false log --use-mailmap --no-merges $_since $_until \
        --date=short --format='%ad' $_pathspec | sort | uniq -c
}

################################################################################
# DESC: Displays the number of commits and percentage contributed to the repo
#       per author and sorts them by contribution percentage
# ARGS: None
# OUTS: None
################################################################################
function commitsPerAuthor()  {
    option_picked "Git commits per author:"
    git -c log.showSignature=false shortlog $_since $_until --no-merges -n -s \
        | sort -nr | LC_ALL=C awk '
    { args[NR] = $0; sum += $0 }
    END {
      for (i = 1; i <= NR; ++i) {
        printf "%s,%2.1f%%\n", args[i], 100 * args[i] / sum
      }
    }' | column -t -s, 
}

################################################################################
# DESC: Shows git shortstats on the current user's changes for current day
# ARGS: None
# OUTS: None
################################################################################
function myDailyStats() {
    option_picked "My daily status:"
    git diff --shortstat '@{0 day ago}' | sort -nr | tr ',' '\n' | LC_ALL=C awk '
    { args[NR] = $0; }
    END {
      for (i = 1; i <= NR; ++i) {
        printf "\t%s\n", args[i]
      }
    }'

    echo -e "\t" $(git -c log.showSignature=false log --use-mailmap \
                       --author="$(git config user.name)" --no-merges \
                       --since=$(date "+%Y-%m-%dT00:00:00") \
                       --until=$(date "+%Y-%m-%dT23:59:59") --reverse \
                       | grep commit | wc -l) "commits"
}

################################################################################
# DESC: Lists all contributors to a repo sorted by alphabetical order
# ARGS: None
# OUTS: None
################################################################################
function contributors() {
    option_picked "All contributors (sorted by name):"
    git -c log.showSignature=false log --use-mailmap --no-merges $_since $_until \
        --format='%aN' $_pathspec | sort -u | cat -n
}

################################################################################
# DESC: Shows an abbreviated ASCII graph based off of commit history
# ARGS: None
# OUTS: None
################################################################################
function branchTree() {
    option_picked "Branching tree view:"
    git -c log.showSignature=false log --use-mailmap --graph --abbrev-commit \
        $_since $_until --decorate \
        --format=format:'--+ Commit:  %h %n  | Date:    %aD (%ar) %n''  | Message: %s %d %n''  + Author:  %aN %n' \
        --all | head -n $((_limit*5))
}

################################################################################
# DESC: Lists all branches sorted by their most recent commit
# ARGS: None
# OUTS: None
################################################################################
function branchesByDate() {
    option_picked "All branches (sorted by most recent commit):"
    git for-each-ref --sort=committerdate refs/heads/ \
        --format='[%(authordate:relative)] %(authorname) %(refname:short)' | cat -n
}

################################################################################
# DESC: Displays the latest commit history in an easy to read format by date
# ARGS: $author (optional): Can focus on a single author. Default is all authors
# OUTS: None
################################################################################
function changelogs() {
    local author="${1:-}"
    local _author=""

    if [[ -z "${author}" ]]; then
        option_picked "Git changelogs:"
        _author="--author=**"
    else
        option_picked "Git changelogs for author '${author}':"
        _author="--author=${author}"
    fi

    NEXT=$(date +%F)
    git -c log.showSignature=false log \
        --use-mailmap \
        --no-merges \
        --format="%cd" \
        --date=short "${_author}" $_since $_until $_pathspec \
        | sort -u -r | head -n $_limit | while read DATE; do
        echo -e "\n[$DATE]"
        GIT_PAGER=cat git -c log.showSignature=false log \
                          --use-mailmap --no-merges \
                          --format=" * %s (%aN)" "${_author}" \
                          --since=$DATE --until=$NEXT
        NEXT=$DATE
    done
}

################################################################################
# MAIN

# Check to make sure all utilities required for this script are installed
check_utils

# Check if we are currently in a git repo.
git rev-parse --is-inside-work-tree > /dev/null

# Parse non-interative commands
if [[ "$#" -eq 1 ]]; then
    case "$1" in
        -r|--suggest-reviewers) suggestReviewers;;
        -T|--detailed-git-stats) detailedGitStats;;
        -b|--branch-tree) branchTree;;
        -d|--commits-per-day) commitsPerDay;;
        -a|--commits-per-author) commitsPerAuthor;;
        -S|--my-daily-stats) myDailyStats;;
        -C|--contributors) contributors;;
        -D|--branches-by-date) branchesByDate;;
        -c|--changelogs) changelogs;;
        -L|--changelogs-by-author)
            author="${_GIT_AUTHOR:-}"
            while [[ -z "${author}" ]]; do 
                read -r -p "Which author? " author
            done
            changelogs "${author}";;
        -w|--commits-by-weekday) commitsByWeekday;;
        -o|--commits-by-hour) commitsByHour;;
        -A|--commits-by-author-by-hour)
            author="${_GIT_AUTHOR:-}"
            while [[ -z "${author}" ]]; do 
                read -r -p "Which author? " author
            done
            commitsByHour "${author}";;
        -m|--commits-by-month) commitsByMonth;;
        -h|-\?|--help) usage;;
        *) echo "Invalid argument"; usage; exit 1;;
    esac
    exit 0;
fi
[[ "$#" -gt 1 ]] && { echo "Invalid arguments"; usage; exit 1; }

# Parse interactive commands
clear
show_menu

while [[ "${opt}" != "" ]]; do
    clear
    case "${opt}" in
        1) detailedGitStats; show_menu;;
        2) changelogs; show_menu;;
        3) author=""
           while [[ -z "${author}" ]]; do 
               read -r -p "Which author? " author
           done
           changelogs "${author}"; show_menu;;
        4) myDailyStats; show_menu;;
        5) branchTree; show_menu;;
        6) branchesByDate; show_menu;;
        7) contributors; show_menu;;
        8) commitsPerAuthor; show_menu;;
        9) commitsPerDay; show_menu;;
       10) commitsByMonth; show_menu;;
       11) commitsByWeekday; show_menu;;
       12) commitsByHour; show_menu;;
       13) author=""
           while [[ -z "${author}" ]]; do 
               read -r -p "Which author? " author
           done
           commitsByHour "${author}"; show_menu;;
       14) suggestReviewers; show_menu;;
       q|"\n") exit;;
       *) clear; option_picked "Pick an option from the menu"; show_menu;;
    esac
done
